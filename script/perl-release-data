#!perl
use v5.26;
use experimental qw(signatures);

$|++;

use File::Spec::Functions;
use JSON;
use Mojo::File;
use Mojo::Util qw(dumper);
use Mojo::UserAgent;

=encoding utf8

=head1 NAME

perl-release-data - collect the file and digest data for perl releases

=head1 SYNOPSIS

Run this script from the root of the repository:

	% script/perl-release-data
	Fetching fresh copy of data/index.html
	Recreating data/latest.json
	Recreating data/checksums.json

=head1 DESCRIPTION

This program collects the data at L<https://www.cpan.org/src/5.0/> stored
in separate files and turns it into a couple of data structures:

=over 4

=item * F<data/lastest.json> - the latest point release for each minor version

=item * F<data/checksums.json> - per release digests

=back

=head1 SOURCE AVAILABILITY

This module is on Github: L<https://github.com/perlreview/perl_docker_images>

There are also backup copies of this repo on other services:

=over 4

=item * L<https://bitbucket.org/theperlreview/perl_docker_images/src/master/>

=item * L<https://gitlab.com/briandfoy/perl_docker_images>

=item * L<https://codeberg.org/briandfoy/perl_docker_images>

=back

=head1 AUTHOR

brian d foy, "<briandfoy@pobox.com>"

=head1 COPYRIGHT AND LICENSE

Copyright Â© 2025, brian d foy "<briandfoy@pobox.com>". All rights
reserved. This software is available under the Artistic License 2.0.

=cut

my $data_dir = 'data';
mkdir $data_dir unless -d $data_dir;

my $ua = Mojo::UserAgent->new;
my $base_url = Mojo::URL->new('https://www.cpan.org/src/5.0/');

my $start_fresh = 0;
my $dom = get_dom($start_fresh);

my $hrefs = $dom->find('a');

my $latest    = create_latest($hrefs, $start_fresh);
my $checksums = create_checksums($hrefs, $start_fresh);

sub create_latest ($hrefs, $start_fresh = 0 ) {
	state $file = catfile( $data_dir, 'latest.json' );

	if( -e $file ) {
		state $rc = require Mojo::JSON;
		say STDERR "Using local copy of $file";
		return Mojo::JSON::decode_json( Mojo::File->new($file)->slurp );
		}

	say STDERR "Recreating $file";

	my $perls = $hrefs
		->map( sub { $_->attr('href') } )
		->grep( sub { ! /bz2 | RC\d/x } )
		->map( sub {
			[ $_, /perl-5\.(\d+)\.(\d+)\./ ]
			} )
		->to_array;

	my %latest;
	foreach my $tuple ( $perls->@* ) {
		$latest{ $tuple->[1] } = $tuple if $latest{ $tuple->[1] }[2] < $tuple->[2];
		}

	mkdir $data_dir unless -d $data_dir;
	open my $fh, ">:utf8", $file
		or die "Could not open <$file>: $!\n";

	my $data = wrap_data(\%latest);
	print {$fh} JSON->new->pretty->encode( $data );

	return $data;
	}

sub create_checksums ($hrefs, $start_fresh = 0) {
	state $file = catfile( $data_dir, 'checksums.json' );

	if( -e $file and ! $start_fresh ) {
		state $rc = require Mojo::JSON;
		say STDERR "Using local copy of $file";
		return Mojo::JSON::decode_json( Mojo::File->new($file)->slurp );
		}

	say STDERR "Recreating $file";

	my $checksum_pattern = qr/(md5|sha(?:1|256))\.txt\z/;
	my $file_pattern = qr/perl-(5\.(\d*[02468])\.(\d+))\./;

	my $checksums = $hrefs
		->map( sub { $_->attr('href') } )
		->grep( sub { (! /bz2 | RC\d/x) and /$checksum_pattern/ } )
		->map( sub {
			return unless /^perl/;
			return unless /$checksum_pattern/;
			return unless /$file_pattern/;

			my $url = $base_url->clone->path($_);

			my $checksum = $ua->get($url)->res->body;
			[ /$file_pattern/, /$checksum_pattern/, $_, $checksum ];
			} )
		->to_array;

	my %checksums;
	foreach my $tuple ( $checksums->@* ) {
		my( $version, $minor, $point, $type, $file, $digest) = $tuple->@*;

		my $archive = $file =~ s/\.(?:gz|xz|bz2)\K.*//r;
		my $url = $base_url->clone->path($archive);

		$checksums{$version}{$type}   = $digest;
		$checksums{$version}{'minor'} = $minor;
		$checksums{$version}{'point'} = $point;
		$checksums{$version}{'url'}  = "$url";
		}

	mkdir $data_dir unless -d $data_dir;
	open my $fh, ">:utf8", $file
		or die "Could not open <$file>: $!\n";
	my $data = wrap_data(\%checksums);
	print {$fh} JSON->new->pretty->encode( $data );

	return $data;
	};

sub get_dom ($start_fresh = 0) {
	state $file = catfile( $data_dir, 'index.html' );
	state $dom = do {
		if( -e $file and ! $start_fresh ) {
			state $rc = require Mojo::JSON;
			say STDERR "Using local copy of $file";
			Mojo::DOM->new( Mojo::File->new($file)->slurp );
			}
		else {
			say STDERR "Fetching fresh copy of $file";
			unlink map { catfile( $data_dir, $_ ) } qw(checksums.json latest.json by_minor.json);
			my $ua = Mojo::UserAgent->new;
			my $base_url = Mojo::URL->new('https://www.cpan.org/src/5.0/');

			my $tx = $ua->get($base_url);
			Mojo::File->new($file)->spew($tx->res->body);

			$tx->res->dom;
			}
		};

	$dom;
	}

sub wrap_data ($ref) {
	state $repo = do {
		my $r = `git config --get remote.origin.url` =~ s|git\@github.com:|https://github.com/|r;
		chomp $r;
		$r;
		};

	my %data = (
		created_by => $0,
		created_at => time,
		repo       => $repo,
		data       => $ref,
		);

	\%data;
	}
__END__
